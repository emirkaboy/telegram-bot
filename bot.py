from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
import aiohttp
import asyncio
import logging

API_TOKEN = '7583712608:AAFZMr_bHyX0JBTNAZBvxk28gUC5_K3glU8'
SMSHUB_API_KEY = '135457U6df9439ad521011cedc614ab5e4405a0'
GETSMS_API_KEY = 'NUESPSUZHA77L9TDNE9BZUF4Y4LF9G3L'

from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì≤ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")],
        [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")],
    ],
    resize_keyboard=True
)

back_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

buy_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåê SMSHub"), KeyboardButton(text="üì° GetSMS")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def top_up(message: Message):
    text = (
        "<b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n\n"
        "1Ô∏è‚É£ <b>SMSHub:</b>\n<code>0xeca1f75f8aa7274a2b924ebef435d814465e3c04</code>\n"
        "2Ô∏è‚É£ <b>GetSMS:</b>\n<code>0x0c52bB955DAA8fC1f6AB79E5df8F907563a5Bb7B</code>\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )
    await message.answer(text, reply_markup=back_menu)

@dp.message(F.text == "üì≤ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
async def buy_number(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=buy_menu)

@dp.message(F.text == "üåê SMSHub")
async def buy_smshub(message: Message):
    await message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ SMSHub –¥–ª—è KZ...", reply_markup=back_menu)
    async with aiohttp.ClientSession() as session:
        try:
            url = f'https://smshub.org/stubs/handler_api.php?api_key={SMSHUB_API_KEY}&action=getNumber&service=wt&country=2'
            async with session.get(url) as resp:
                text = await resp.text()
                if text.startswith("ACCESS_NUMBER"):
                    parts = text.split(':')
                    number = parts[2]
                    await message.answer(f"‚úÖ –ù–æ–º–µ—Ä: <code>{number}</code>")
                elif "NO_NUMBERS" in text:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ SMSHub: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ SMSHub: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ SMSHub: {str(e)}")

@dp.message(F.text == "üì° GetSMS")
async def buy_getsms(message: Message):
    await message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ GetSMS –¥–ª—è KZ...", reply_markup=back_menu)
    async with aiohttp.ClientSession() as session:
        try:
            url = f'https://getsms.online/stubs/handler_api.php?api_key={GETSMS_API_KEY}&action=getNumber&service=dt&country=kz'
            async with session.get(url) as resp:
                text = await resp.text()
                if text.startswith("ACCESS_NUMBER"):
                    parts = text.split(':')
                    number = parts[2]
                    await message.answer(f"‚úÖ –ù–æ–º–µ—Ä: <code>{number}</code>")
                elif "NO_NUMBERS" in text:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ GetSMS: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ GetSMS: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GetSMS: {str(e)}")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

